[soomla]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = soomla

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = soomla

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -I%(clangllvmdir)s/lib/clang/3.3/include
clang_flags = -nostdinc -x c++ -std=c++11

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android
cocos_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(srcdir)s/Cocos2dxStore.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".

classes = CCCoreService CCReward CCServiceManager CCSoomlaStore CCEquippableVG CCLifetimeVG CCVirtualGood CCPurchasableVirtualItem CCVirtualItem CCDomain CCSoomlaEntity CCMarketItem CCNonConsumableItem CCPurchaseType CCPurchaseWithMarket CCPurchaseWithVirtualItem CCSingleUsePackVG CCSingleUseVG CCError CCStoreInfo CCUpgradeVG CCVirtualCategory CCStoreInventory CCVirtualCurrency CCVirtualCurrencyPack CCStoreService JSBEventHandler JSBStoreAssets

classes_need_extend = CCDomain CCSoomlaEntity CCPurchaseType CCError CCVirtualCategory CCReward CCCoreService

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip =

rename_functions =

rename_classes = CCSoomlaStore::SoomlaStore,
				 CCEquippableVG::EquippableVG,
				 CCLifetimeVG::LifetimeVG,
				 CCVirtualGood::VirtualGood,
				 CCPurchasableVirtualItem::PurchasableVirtualItem,
				 CCVirtualItem::VirtualItem,
				 CCDomain::Domain,
				 CCSoomlaEntity::SoomlaEntity,
				 CCMarketItem::MarketItem,
				 CCNonConsumableItem::NonConsumableItem,
				 CCPurchaseType::PurchaseType,
				 CCPurchaseWithMarket::PurchaseWithMarket,
				 CCPurchaseWithVirtualItem::PurchaseWithVirtualItem,
				 CCSingleUsePackVG::SingleUsePackVG,
				 CCSingleUseVG::SingleUseVG,
				 CCError::Error,
				 CCStoreInfo::StoreInfo,
				 CCUpgradeVG::UpgradeVG,
				 CCVirtualCategory::VirtualCategory,
				 CCStoreInventory::StoreInventory,
				 CCVirtualCurrency::VirtualCurrency,
				 CCVirtualCurrencyPack::VirtualCurrencyPack,
				 CCStoreService::StoreService,
				 CCReward::Reward,
				 CCCoreService::CoreService,
				 CCServiceManager::ServiceManager,
				 JSBEventHandler::EventHandler,
				 JSBStoreAssets::StoreAssets

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = JSBEventHandler JSBStoreAssets

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref Clonable

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = CCDomain CCStoreAssets CCError CCReward

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no
